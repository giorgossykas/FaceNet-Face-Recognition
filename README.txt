Αρχεία:
-"register_user.py": Ξεκινάει η καταγραφή και αποθήκευση δεδομένων νέου χρήστη.
-"face_recognition.py": Ξεκινάει η αναγνώριση του προσώπου.
-"new_user.py": Συναρτήσεις για καταγραφή και καταχώρηση στοιχείων χρήστη.
-"process_images.py": Συναρτήσεις για επεξεργασία και την εξαγωγή δεδομένων των εικόνων.
-"classification_L2_Norm": Συναρτήσεις για επεξεργασία δεδομένων χρήστη κατά τη διάρκεια της αναγνώρισης και υπολογισμός της απόφασης του αλγορίθμου.
-"embeddings.npz": Θα δημιουργηθεί μετά την πρώτη εκτέλεση του "register_user.py" και θα περιέχει τα embeddings του.
-Φάκελος "model": Μοντέλο Facenet και "haarcascade_frontalface_alt.xml".
-Φάκελος "data": Directory που θα μπουν τα δεδομένα των χρηστών.
-Φάκελος "code": Περιέχει την αρχιτεκτονική του FaceNet, "inception_resnet_v1.py"
-"requirements.txt": Απαιτούμενα πακέτα.
-"README.txt": Οδηγίες και πληροφορίες.

Οδηγίες: 
1. Unzip το αρχείο “FaceNet face recognition.zip” ή clone.
2. Άνοιγμα του φακέλου “FaceNet face recognition” στο IDE.
3. Interpreter με Python 3.6.2 (ίσως δουλεύει και με άλλες εκδόσεις αλλά χρησιμοποιώ αυτή επειδή την υποστηρίζει το PyCharm και με αυτή φτιάχτηκε το μοντέλο FaceNet.)
4. Εγκατάσταση κατάλληλων εκδόσεων tensorflow και keras και πακέτων από το “requirements.txt”.
5. Run το “register_user.py” για να βγάλει φωτογραφίες ο νέος χρήστης. Η αποθήκευση των δεδομένων θα γίνει αυτόματα στους κατάλληλους φακέλους.
6. Run το “face_recognition.py” για να γίνει η αναγνώριση του προσώπου.
7. Τυπώνεται το αποτέλεσμα του αλγορίθμου.


Ο κώδικας γράφτηκε σε PyCharm Community Edition 2021.3.3 με Python 3.6.2,
και το pretrained μοντέλο FaceNet δημιουργήθηκε σε Ubuntu16.04/Windows10, Python 3.6.2,
tensorflow 1.3.0 και keras 2.1.2 (χρησιμοποίησα keras 2.1.3 αντί για 2.1.2 γιατί υπήρχε
πρόβλημα με τη Softmax)


*** Να μη μετονομαστούν και να μη μετακινηθούν οι φάκελοι που ήδη υπάρχουν
    στο “FaceNet_face_recognition.zip”.